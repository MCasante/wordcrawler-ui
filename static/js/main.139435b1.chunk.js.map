{"version":3,"sources":["Components/CrawlerUI/index.js","App.js","index.js"],"names":["CrawlerUI","props","useState","urlList","setUrlList","incidences","setIncidences","defaultFilters","setDefaultFilters","waiting","setWaiting","ignoreDefault","className","htmlFor","name","id","onChange","e","target","value","split","join","onClick","filter","domain","forEach","url","opts","method","mode","headers","Accept","body","JSON","stringify","fetch","then","res","json","data","oldData","concat","_","keysSet","Set","inc","add","newIncidences","Array","from","map","key","b","a","reduce","acc","next","Number","occ","length","includes","i","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAiGeA,EA/FG,SAAAC,GAAU,IAAD,EAEOC,mBAAS,IAFhB,mBAEhBC,EAFgB,KAEPC,EAFO,OAGaF,mBAAS,IAHtB,mBAGhBG,EAHgB,KAGJC,EAHI,OAIqBJ,oBAAS,GAJ9B,mBAIhBK,EAJgB,KAIAC,EAJA,OAMON,mBAAS,IANhB,mBAMhBO,EANgB,KAMPC,EANO,KAQjBC,EAAgB,CAAC,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,OAAQ,KAAM,KAAM,KAAM,MA0C7H,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eACX,uDACA,8DAEA,yBAAKA,UAAU,eACX,2BAAOC,QAAQ,WAAf,0BACA,8BAAUC,KAAK,UAAUC,GAAG,UAAUC,SAjD1D,SAAsBC,GAClBb,EACIa,EAAEC,OAAOC,MAAMC,MAAM,QA+CqDD,MAAOhB,EAAQkB,KAAK,QAClF,4BAAQT,UAAU,SAASU,QAjC/C,WAEuBnB,EAAQoB,QAAO,SAAAC,GAAM,MAAe,KAAXA,KAEjCC,SAAQ,SAAAC,GACf,IACMC,EAAO,CACTC,OAAQ,OACRC,KAAM,OACNC,QAAS,CAAEC,OAAQ,mBAAoB,eAAgB,oBACvDC,KALYC,KAAKC,UAAU,CAAER,IAAKA,KAQtChB,EAAWgB,GACXS,MAbW,wDAaGR,GACTS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFjC,GAAc,SAAAkC,GAAO,OAAIA,EAAQC,OAAOF,SAE3CH,MAAK,SAAAM,GAAC,OAAIhC,EAAW,YAcd,YAGR,yBAAKE,UAAU,UACX,yBAAKA,UAAU,OACX,2CACCP,GACG,yBAAKO,UAAU,gBACX,yBAAKA,UAAU,kBACX,4BAAQA,UAAU,SAASU,QAAS,kBAAMd,GAAmBD,KAA7D,kBACA,4BAAQK,UAAU,SAASU,QAtD3D,WACI,IAAMqB,EAAU,IAAIC,IACpBvC,EAAWoB,SAAQ,SAAAoB,GAAG,OAAIF,EAAQG,IAAID,EAAI/B,SAC1C,IACMiC,EADYC,MAAMC,KAAKN,GACGO,KAAI,SAAAC,GAChC,IAAMC,EAAI/C,EAAWkB,QAAO,SAAA8B,GAAC,OAAIA,EAAEvC,OAASqC,KAC5C,MAAO,CAAErC,KAAMqC,EAAK9C,WAAY+C,EAAEE,QAAO,SAACC,EAAKC,GAAN,OAAeC,OAAOF,EAAIlD,YAAcoD,OAAOD,EAAKnD,mBAEjGC,EAAcyC,KA8Cc,cACA,4BAAQnC,UAAU,SAASU,QAAS,kBAAMhB,EAAc,MAAxD,eAEJ,4BACI,wBAAIM,UAAU,cAAa,wCAA3B,IAAiD,8CAChDP,EAAWkB,QACR,SAAAmC,GAAG,OAAInD,GACDmD,EAAI5C,KAAK6C,OAAS,IAAMhD,EAAciD,SAASF,EAAI5C,SAE3DoC,KAAI,SAACQ,EAAKG,GAAN,OACF,wBAAIV,IAAKU,GACL,gCAASH,EAAI5C,MADjB,IACgC,8BAAO4C,EAAIrD,kBAM1DI,GAAW,+CAAqBA,EAArB,YC3ErBqD,MARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,QCLNmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.139435b1.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst CrawlerUI = props => {\n\n    const [urlList, setUrlList] = useState([])\n    const [incidences, setIncidences] = useState([])\n    const [defaultFilters, setDefaultFilters] = useState(true)\n\n    const [waiting, setWaiting] = useState('')\n\n    const ignoreDefault = ['de', 'dos', 'das', 'da', 'do', 'os', 'as', 'com', 'se', 'na', 'em', 'por', 'cada', 'ec', 'ac', 'ad', 'no']\n\n    function parseUrlList(e) {\n        setUrlList(\n            e.target.value.split('\\n')\n        )\n    }\n\n    function mergeData() {\n        const keysSet = new Set()\n        incidences.forEach(inc => keysSet.add(inc.name))\n        const keysArray = Array.from(keysSet)\n        const newIncidences = keysArray.map(key => {\n            const b = incidences.filter(a => a.name === key)\n            return { name: key, incidences: b.reduce((acc, next) => Number(acc.incidences) + Number(next.incidences)) }\n        })\n        setIncidences(newIncidences)\n    }\n\n    function fetchData() {\n        const apiURL = 'https://wordcrawler-api.herokuapp.com/get-occurrences'\n        const urlToFetch = urlList.filter(domain => domain !== '')\n\n        urlToFetch.forEach(url => {\n            const msgBody = JSON.stringify({ url: url })\n            const opts = {\n                method: 'POST',\n                mode: 'cors',\n                headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n                body: msgBody\n            }\n\n            setWaiting(url)\n            fetch(apiURL, opts)\n                .then(res => res.json())\n                .then(data => {\n                    setIncidences(oldData => oldData.concat(data))\n                })\n                .then(_ => setWaiting(''))\n        })\n    }\n\n    return (\n        <div className=\"CrawlerUI\">\n            <div className=\"container\">\n                <div className=\"form-search\">\n                    <h1>Search for domains here</h1>\n                    <span>e.g. https://www.google.com/</span>\n\n                    <div className=\"form-holder\">\n                        <label htmlFor=\"domains\">Domains (one per line)</label>\n                        <textarea name=\"domains\" id=\"domains\" onChange={parseUrlList} value={urlList.join('\\n')} />\n                        <button className=\"button\" onClick={fetchData}>Submit</button>\n                    </div>\n                </div>\n                <div className=\"output\">\n                    <div className=\"box\">\n                        <h2>Occurrences</h2>\n                        {incidences &&\n                            <div className=\"table-holder\">\n                                <div className=\"table-controls\">\n                                    <button className=\"button\" onClick={() => setDefaultFilters(!defaultFilters)}>Toggle filters</button>\n                                    <button className=\"button\" onClick={mergeData}>Merge data</button>\n                                    <button className=\"button\" onClick={() => setIncidences([])}>Clear Data</button>\n                                </div>\n                                <ul>\n                                    <li className=\"table-head\"><strong>Word</strong> <span>Occurrences</span></li>\n                                    {incidences.filter(\n                                        occ => defaultFilters\n                                            ? occ.name.length > 1 && !ignoreDefault.includes(occ.name)\n                                            : true\n                                    ).map((occ, i) => (\n                                        <li key={i}>\n                                            <strong>{occ.name}</strong> <span>{occ.incidences}</span>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </div>\n                        }\n                        {waiting && <span>Crawling into {waiting}...</span>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CrawlerUI","import React from 'react';\nimport './App.css';\nimport CrawlerUI from './Components/CrawlerUI'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CrawlerUI />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}